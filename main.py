import uvicorn
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

books = [
    {
        "id": 1,
        "title": "–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å –≤ Python",
        "author": "–ú—ç—Ç—Ç—å—é",
    },
    {
        "id": 2,
        "title": "Backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤ Python",
        "author": "–ê—Ä—Ç–µ–º",
    },
]


@app.get("/books",
         tags=["–ö–Ω–∏–≥–∏ üìö"],
         summary="–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏"
         )
def read_books():
    return books


@app.get("/books/{book_id}",
         tags=["–ö–Ω–∏–≥–∏ üìö"],
         summary="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ç—Ä–µ—Ç–Ω—É—é –∫–Ω–∏–≥—É üìï")
def get_book(book_id: int):
    for book in books:
        if book["id"] == book_id:
            return book
    raise HTTPException(status_code=404, detail="–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


class NewBook(BaseModel):
    title: str
    author: str


@app.post("/books")
def create_book(new_book: NewBook):
    books.append({
        "id": len(books) + 1,
        "title": new_book.title,
        "author": new_book.author,
    })
    return {"success": True, "message": "–ö–Ω–∏–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"}


if __name__ == "__main__":
    uvicorn.run("main:app", reload=True)
